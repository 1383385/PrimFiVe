#!/usr/bin/env python3
__author__ = 'aditya.onco@gmail.com'
version = "0.1"
#Tests
import distutils.spawn
import os
import subprocess
import re
check = 0
try:
    from Bio import SeqIO
    print("1. BioPython seems installed!\t\tPASS")
except ImportError as e:
    print("1. Biopython is not installed! Please install the same and make sure the executables are available in your PATH\t\tFAIL")
    check+=1
if distutils.spawn.find_executable('primer3_core') is not None:
    print("2. Primer3 seems installed!\t\tPASS")
else:
    print("2. Primer3  does not seems to be install. Install it and make sure it is available in System PATH\t\tFAIL")
    check+=1
try:
    import easygui
    print("3. EasyGUI seems installed!\t\tPASS")
except ImportError as e:
    print("3. EasyGUI is not installed! Please install the same and make sure the executables are available in your PATH\t\tFAIL")
    check+=1
if distutils.spawn.find_executable('splitter') is not None:
    print("4. EMBOSS seems installed.\t\tPASS")
else:
    print("4. EMBOSS does not seems to be install. Install it and make sure it is available in System PATH\t\tFAIL")
    check+=1
if check ==0:
    print("4 out of 4 tests passed!\nWelcome to PrimFiVe version {}!".format(version))
else:
    print("{} out of 4 tests failed! Please check the listed errors and re-run the program.\nThank you.".format(check))
    exit()
# USAGE #####################################################################################################################
# Straightforward usage. Simply select the GenBank file with features and select the feature you wish to have               #
# specific sequencing primers against. Or select the FASTA file andPrimFiVe will do the rest.                               #
# Common Issues:                                                                                                            #
# Issue 1: Warning: No sequences written to output file "Link/to/your/feature/file.fasta"                                   #
# Solution: Make sure the GenBank file has that feature listed that you have requested.                                     #
# For example, if you selected "exon" as the feature and the GenBank file lacks that feature, this error will be triggered. #
# Issue 2: PRIMER_ERROR=thermodynamic approach chosen, but path to thermodynamic parameters not specified                   #
# Solution: Put the "primer3_config" folder that comes with the Primer3 package in the "/opt/" directory.                   #
# For any query/ suggestion please feel free to contact:                                                                    #
# Aditya Singh                                                                                                              #
# Ph.D. Scholar                                                                                                             #
# Haemat-Onco Unit                                                                                                          #
# Advanced Paediatrics Centre                                                                                               #
# Postgraudate Institute of Medical Education and Research                                                                  #
# Chandigarh, India, 160012                                                                                                 #
# aditya.onco@gmail.com                                                                                                     #
###################################################################################################################Thank you#
#Setting up the variables
citation="Singh, A., Bhatia, P. 2017. PrimFiVe: An automated multiplexable primer finding and verification pipeline."
genbank_fasta = easygui.choicebox(title="Would you like to extract features or work on fasta file ?", msg="Select target sequence format:",choices=["FASTA","GenBank"])
if genbank_fasta == "GenBank":
    target_sequences= easygui.fileopenbox(title="Select the target GenBank File", msg="Please select the target GenBank File", filetypes=['*.gb', '*.gbk'], multiple=True)
    choice = easygui.choicebox(title="Target region selection", msg="Please select the target to design primers against", choices=['exon','mRNA', 'CDS','gene'])
    size = easygui.enterbox(title="Enter the max allowed size of PCR products.", msg="Enter the max allowed size of PCR products\nPlease note that the actual size might go 200bp above this mark\nin certain cases.\nDo check the Primer verification result file for actual lengths.", default=600)
    if len(target_sequences) > 1:
        announce = "sequences"
    else:
        announce = "sequence"
    print("You chose Primer designing against all {0}s in given {1} {2} with max allowed product size of {3} bases.\nProceeding...".format(choice, len(target_sequences), announce,size))
    for entry in target_sequences:
        count = 0
        primer_not_found = 0
        log = open(entry[:-3]+"_{}_LOG.txt".format(choice), "a")
        print("\nWorking on {}...\n".format(entry))
        os.system("extractfeat "+entry+" -type "+choice+" -before 200 -after 200 -outseq "+entry[:-3]+"_{}.fasta".format(choice))
        if os.path.getsize(entry[:-3]+"_{}.fasta".format(choice)) > 0:
            with open(entry[:-3]+"_{}.fasta".format(choice)) as fasta:
                for record in SeqIO.parse(fasta, "fasta"):
                    count+=1
                    length =len(record.seq)
                    print(record.id+"_{}_".format(choice)+str(count)+" {} Length: ".format(choice)+str(length-400))
                    log.write(record.id+"_{}_".format(choice)+str(count)+" {} Length: ".format(choice)+str(length-400)+"\n")
                    if length-400 > 70:
                        min_product_size = length-400
                    else:
                        min_product_size = 70
                        pass
                    max_product_size = length
                    boulder_file = open(entry[:-3]+"_{}_.p3".format(choice), "a")
                    if length-400 <=int(size):
                        boulder_file.write("SEQUENCE_ID= "+record.id+"_{0}_{1}".format(choice,count)+"\nSEQUENCE_TEMPLATE="+str(record.seq)+"\nSEQUENCE_TARGET=200,{}\n".format(length-400)+"PRIMER_TASK=pick_sequencing_primers\nPRIMER_PICK_LEFT_PRIMER=1\nPRIMER_PICK_RIGHT_PRIMER=1\nPRIMER_OPT_SIZE=18\nPRIMER_MIN_SIZE=15\nPRIMER_MAX_SIZE=24\n"+"PRIMER_PRODUCT_SIZE_RANGE={0}-{1}".format(min_product_size,max_product_size)+"\nSEQUENCE_PRIMER_PAIR_OK_REGION_LIST=0,200,"+str(length-200)+",200\nP3_FILE_FLAG=0\n=\n")
                    elif length-400 >int(size):
                        part = 1
                        split_seq = boulder_file.name + "_Split_{0}_{1}.fasta".format(choice,count)
                        with open(boulder_file.name+"_TEMP.fasta", "w") as file:
                            file.write("> "+str(record.id)+"\n"+str(record.seq))
                        os.system("splitter -sequence "+boulder_file.name+"_TEMP.fasta"+" -outseq "+split_seq+" -size={} -over=200".format(size))
                        num_seqs = subprocess.check_output(["awk '/>/ { count++ } END { print count }' "+split_seq], shell=True,universal_newlines=True).rstrip()
                        print("The {0} {2}'s length is larger than the max allowed product size of {1} bases.\nThe target {0} has been split in {3} parts automatically.\nKindly verify that this set of primers spans the whole {0}.\n".format(choice, size, count,num_seqs))
                        log.write("The {0} {2}'s length is larger than the max allowed product size of {1} bases.\nThe target {0} has been split in {3} parts automatically.\nKindly verify that this set of primers spans the whole {0}.\n".format(choice, size, count, num_seqs))
                        os.system("rm "+boulder_file.name+"_TEMP.fasta")
                        with open(split_seq) as fasta_split:
                            count_split=0
                            for record_split in SeqIO.parse(fasta_split, "fasta"):
                                length_new = len(record_split.seq)
                                print(length_new)
                                if part ==1:
                                    boulder_file.write("SEQUENCE_ID= "+record.id+"_{0}_{1}_part_{2}".format(choice,count,part)+"\nSEQUENCE_TEMPLATE="+str(record_split.seq)+"\nSEQUENCE_TARGET=200,{}\n".format(length_new-300)+"PRIMER_TASK=generic\nPRIMER_PICK_LEFT_PRIMER=1\nPRIMER_PICK_RIGHT_PRIMER=1\nPRIMER_OPT_SIZE=18\nPRIMER_MIN_SIZE=15\nPRIMER_MAX_SIZE=24"+"\nPRIMER_PRODUCT_SIZE_RANGE=25-{}".format(length_new+25)+"\nP3_FILE_FLAG=0\n=\n")
                                    part+=1
                                elif part >=1 and part<int(num_seqs):
                                    boulder_file.write("SEQUENCE_ID= " + record.id + "_{0}_{1}_part_{2}".format(choice, count,part) + "\nSEQUENCE_TEMPLATE=" + str(record_split.seq) + "\nSEQUENCE_TARGET=100,{}\n".format(length_new-300) + "PRIMER_TASK=generic\nPRIMER_PICK_LEFT_PRIMER=1\nPRIMER_PICK_RIGHT_PRIMER=1\nPRIMER_OPT_SIZE=18\nPRIMER_MIN_SIZE=15\nPRIMER_MAX_SIZE=24" + "\nPRIMER_PRODUCT_SIZE_RANGE=25-{}".format(length_new + 25)+"\nP3_FILE_FLAG=0\n=\n")
                                    part+=1
                                elif part>=int(num_seqs) and length_new >=301:
                                    boulder_file.write("SEQUENCE_ID= " + record.id + "_{0}_{1}_part_{2}".format(choice, count,part) + "\nSEQUENCE_TEMPLATE=" + str(record_split.seq) + "\nSEQUENCE_TARGET=100,{}\n".format(length_new - 300) + "PRIMER_TASK=generic\nPRIMER_PICK_LEFT_PRIMER=1\nPRIMER_PICK_RIGHT_PRIMER=1\nPRIMER_OPT_SIZE=18\nPRIMER_MIN_SIZE=15\nPRIMER_MAX_SIZE=24" + "\nPRIMER_PRODUCT_SIZE_RANGE=25-{}".format(length_new + 25) + "\nP3_FILE_FLAG=0\n=\n")
                                    part+=1
            boulder_file.close()
            os.system("primer3_core -format_output -output " + entry[:-3] + "_Primers.txt" + " <" + boulder_file.name)
            primer_parse_file = open(entry[:-3] + "_Primers.txt", "r")
            for line in primer_parse_file:
                if line.startswith("NO PRIMERS FOUND") or line.startswith("NO LEFT PRIMER FOUND") or line.startswith(
                        "NO RIGHT PRIMER FOUND"):
                    primer_not_found += 1
            if primer_not_found >= 1:
                print("\nFailed to find {0} primer(s).\n".format(primer_not_found))
                log.write("\nFailed to find {0} primer(s).\n".format(primer_not_found))
            else:
                print("Successfully found all primers for this sequence.")
                log.write("Successfully found all primers for this sequence.")
            result_file = open(entry[:-3] + "_{}_SIMPLIFIED_Results.txt".format(choice), "a")
            result_file.write("                     start  len      tm     gc%  any_th  3'_th hairpin seq\n----------------------------------------------------------------------------------------\n")
            with open(entry[:-3] + "_Primers.txt") as file:
                for line in file:
                    if line.startswith("PRIMER PICKING RESULTS FOR  "):
                        result_file.write("Sequence Name: " + line[28:])
                    if "1 LEFT_PRIMER" in line:
                        result_file.write("Forward Primer" + line[14:])
                    if "1 RIGHT_PRIMER" in line:
                        result_file.write("Reverse Primer " + line[15:] + "\n")
                    if line.startswith("LEFT PRIMER"):
                        result_file.write("Forward Primer" + line[11:])
                    if line.startswith("RIGHT PRIMER"):
                        result_file.write("Reverse Primer " + line[12:] + "\n")
            result_file.close()
            verification = open(result_file.name[:-23] + "_Primer_Order_File.txt", "a")
            with open(result_file.name, 'r') as simplified_primer_file:
                for line in simplified_primer_file:
                    if line.startswith("Sequence Name: "):
                        verification.write("\n" + line[15:-1])
                    if line.startswith("Forward Primer"):
                        verification.write("\t" + line[70:-1])
                    if line.startswith("Reverse Primer"):
                        verification.write("\t" + line[70:-1])
            print("Commencing verification of the designed primers using 'EMBOSS Primersearch' against '{}'".format(
                entry))
            verification.close()
            with open(verification.name, 'r') as readme:
                intermediate_file = readme.read().splitlines(True)
            with open(verification.name, 'w') as intermediate:
                intermediate.writelines(intermediate_file[1:])
            os.system("primersearch -verbose -mismatchpercent 0 -seqall " + str(
                entry) + " -infile " + verification.name + " -outfile " + verification.name[
                                                                          :-14] + "Verification_RESULT.txt")
            verification_report = open(verification.name[:-14] + "Verification_REPORT.txt", 'a')
            verification_report.write(
                "_____________________________________________\nName of sequence\tNumber of amplimers\n_____________________________________________\n")
            with open(verification.name[:-14] + "Verification_RESULT.txt", 'r') as verifile:
                for section in re.findall("Primer name (.*?)	Amplimer length", verifile.read(), re.S):
                    amplicons = section.count("Amplimer")
                    data = section.splitlines()
                    verification_report.write(data[0] + "\t" + str(amplicons) + "\n")
        else:
            print("The GenBank file '{0}' might be missing '{1}' feature.\nPlease check and try again.".format(entry, choice))
            os.system("rm " + entry[:-3] + "_{}.fasta".format(choice))
            log.write("'{0}' feature might be missing in the GenBank file '{1}'.\nPlease check and run again.\nThank you for using PrimFiVe v. {2}!".format(choice, entry, version))
elif genbank_fasta == "FASTA":
    target_sequences = easygui.fileopenbox(title="Select the target FASTA File",msg="Please select the target FASTA File", filetypes=['*.fasta', '*.fa','*.fs'],multiple=True)
    size = easygui.enterbox(title="Enter the max allowed size of PCR products",msg="Enter the max allowed size of PCR products\nPlease note that the actual size might go 200bp above this mark\nin certain cases.\nDo check the Primer verification result file for actual lengths.", default=600)
    if len(target_sequences) > 1:
        announce = "sequences"
    else:
        announce = "sequence"
    print("You chose Primer designing against all FASTA sequence(s) in given {0} {1} with max allowed product size of {2} bases.\nProceeding...".format(len(target_sequences), announce, size))
    for entry in target_sequences:
        count = 0
        primer_not_found = 0
        log = open(entry[:-3] + "_LOG.txt", "a")
        print("\nWorking on {}...\n".format(entry))
        with open(entry,"r") as fasta:
                for record in SeqIO.parse(fasta, "fasta"):
                    count += 1
                    length = len(record.seq)
                    print(record.id + "_" + str(count) + " Length: " + str(
                        length - 400))
                    log.write(record.id + "_Seq_" + str(count) + " Length: " + str(
                        length - 400) + "\n")
                    if length - 400 > 70:
                        min_product_size = length - 400
                    else:
                        min_product_size = 70
                        pass
                    max_product_size = length
                    boulder_file = open(entry[:-3] + "_.p3", "a")
                    if length - 400 <= int(size):
                        boulder_file.write("SEQUENCE_ID= " + record.id + "_{0}".format(count) + "\nSEQUENCE_TEMPLATE=" + str(record.seq) + "\nSEQUENCE_TARGET=200,{}\n".format(length - 400) + "PRIMER_TASK=pick_sequencing_primers\nPRIMER_PICK_LEFT_PRIMER=1\nPRIMER_PICK_RIGHT_PRIMER=1\nPRIMER_OPT_SIZE=18\nPRIMER_MIN_SIZE=15\nPRIMER_MAX_SIZE=24\n" + "PRIMER_PRODUCT_SIZE_RANGE={0}-{1}".format(
                            min_product_size, max_product_size) + "\nSEQUENCE_PRIMER_PAIR_OK_REGION_LIST=0,200," + str(
                            length - 200) + ",200\nP3_FILE_FLAG=0\n=\n")
                    elif length - 400 > int(size):
                        part = 1
                        split_seq = boulder_file.name + "_Split_{0}.fasta".format(count)
                        with open(boulder_file.name + "_TEMP.fasta", "w") as file:
                            file.write("> " + str(record.id) + "\n" + str(record.seq))
                        os.system(
                            "splitter -sequence " + boulder_file.name + "_TEMP.fasta" + " -outseq " + split_seq + " -size={} -over=200".format(
                                size))
                        num_seqs = subprocess.check_output(["awk '/>/ { count++ } END { print count }' " + split_seq],
                                                           shell=True, universal_newlines=True).rstrip()
                        print(
                            "The sequence {1}'s length is larger than the max allowed product size of {0} bases.\nThe target sequence has been split in {2} parts automatically.\nKindly verify that this set of primers spans the whole sequence.\n".format(size, count, num_seqs))
                        log.write("The sequence {1}'s length is larger than the max allowed product size of {0} bases.\nThe target sequence has been split in {2} parts automatically.\nKindly verify that this set of primers spans the whole sequence.\n".format(size, count, num_seqs))
                        os.system("rm " + boulder_file.name + "_TEMP.fasta")
                        with open(split_seq) as fasta_split:
                            count_split = 0
                            for record_split in SeqIO.parse(fasta_split, "fasta"):
                                length_new = len(record_split.seq)
                                print(length_new)
                                if part == 1:
                                    boulder_file.write(
                                        "SEQUENCE_ID= " + record.id + "_{0}_part_{1}".format(count,
                                                                                                 part) + "\nSEQUENCE_TEMPLATE=" + str(
                                            record_split.seq) + "\nSEQUENCE_TARGET=200,{}\n".format(
                                            length_new - 300) + "PRIMER_TASK=generic\nPRIMER_PICK_LEFT_PRIMER=1\nPRIMER_PICK_RIGHT_PRIMER=1\nPRIMER_OPT_SIZE=18\nPRIMER_MIN_SIZE=15\nPRIMER_MAX_SIZE=23" + "\nPRIMER_PRODUCT_SIZE_RANGE=25-{}".format(
                                            length_new + 25) + "\nP3_FILE_FLAG=0\n=\n")
                                    part += 1
                                elif part >= 1 and part < int(num_seqs):
                                    boulder_file.write(
                                        "SEQUENCE_ID= " + record.id + "_{0}_part_{1}".format(count,part) + "\nSEQUENCE_TEMPLATE=" + str(record_split.seq) + "\nSEQUENCE_TARGET=100,{}\n".format(length_new - 300) + "PRIMER_TASK=generic\nPRIMER_PICK_LEFT_PRIMER=1\nPRIMER_PICK_RIGHT_PRIMER=1\nPRIMER_OPT_SIZE=18\nPRIMER_MIN_SIZE=15\nPRIMER_MAX_SIZE=24" + "\nPRIMER_PRODUCT_SIZE_RANGE=25-{}".format(length_new + 25) + "\nP3_FILE_FLAG=0\n=\n")
                                    part += 1
                                elif part >= int(num_seqs) and length_new >=301:
                                    boulder_file.write("SEQUENCE_ID= " + record.id + "_{0}_part_{1}".format(count,part) + "\nSEQUENCE_TEMPLATE=" + str(record_split.seq) + "\nSEQUENCE_TARGET=100,{}\n".format(length_new - 300) + "PRIMER_TASK=generic\nPRIMER_PICK_LEFT_PRIMER=1\nPRIMER_PICK_RIGHT_PRIMER=1\nPRIMER_OPT_SIZE=18\nPRIMER_MIN_SIZE=15\nPRIMER_MAX_SIZE=24" + "\nPRIMER_PRODUCT_SIZE_RANGE=25-{}".format(length_new + 25) + "\nP3_FILE_FLAG=0\n=\n")
                                    part += 1
        boulder_file.close()
        os.system("primer3_core -format_output -output "+entry[:-3]+"_Primers.txt"+" <"+boulder_file.name)
        primer_parse_file =open(entry[:-3]+"_Primers.txt", "r")
        for line in primer_parse_file:
            if line.startswith("NO PRIMERS FOUND") or line.startswith("NO LEFT PRIMER FOUND") or line.startswith("NO RIGHT PRIMER FOUND"):
                primer_not_found+=1
        if primer_not_found>=1:
            print("\nFailed to find {0} primer(s).\n".format(primer_not_found))
            log.write("\nFailed to find {0} primer(s).\n".format(primer_not_found))
        else:
            print("Successfully found all primers for this sequence.")
            log.write("Successfully found all primers for this sequence.")
        result_file = open(entry[:-3] + "_SIMPLIFIED_Results.txt", "a")
        result_file.write("                     start  len      tm     gc%  any_th  3'_th hairpin seq\n----------------------------------------------------------------------------------------\n")
        with open(entry[:-3] + "_Primers.txt") as file:
            for line in file:
                if line.startswith("PRIMER PICKING RESULTS FOR  "):
                    result_file.write("Sequence Name: " + line[28:])
                if "1 LEFT_PRIMER" in line:
                    result_file.write("Forward Primer" + line[14:])
                if "1 RIGHT_PRIMER" in line:
                    result_file.write("Reverse Primer " + line[15:] + "\n")
                if line.startswith("LEFT PRIMER"):
                    result_file.write("Forward Primer" + line[11:])
                if line.startswith("RIGHT PRIMER"):
                    result_file.write("Reverse Primer " + line[12:] + "\n")
        result_file.close()
        verification = open(result_file.name[:-23] + "_Primer_Order_File.txt", "a")
        with open(result_file.name, 'r') as simplified_primer_file:
            for line in simplified_primer_file:
                if line.startswith("Sequence Name: "):
                    verification.write("\n" + line[15:-1])
                if line.startswith("Forward Primer"):
                    verification.write("\t" + line[70:-1])
                if line.startswith("Reverse Primer"):
                    verification.write("\t" + line[70:-1])
        print("Commencing verification of the designed primers using 'EMBOSS Primersearch' against '{}'".format(entry))
        verification.close()
        with open(verification.name,'r') as readme:
            intermediate_file=readme.read().splitlines(True)
        with open(verification.name,'w') as intermediate:
            intermediate.writelines(intermediate_file[1:])
        os.system("primersearch -verbose -mismatchpercent 0 -seqall " + str(entry) +" -infile "+verification.name+ " -outfile "+verification.name[:-14]+"Verification_RESULT.txt")
        verification_report = open(verification.name[:-14]+"Verification_REPORT.txt", 'a')
        verification_report.write("_____________________________________________\nName of sequence\tNumber of amplimers\n_____________________________________________\n")
        with open(verification.name[:-14]+"Verification_RESULT.txt", 'r') as verifile:
            for section in re.findall("Primer name (.*?)	Amplimer length", verifile.read(), re.S):
                amplicons = section.count("Amplimer")
                data = section.splitlines()
                verification_report.write(data[0] + "\t" + str(amplicons) + "\n")
print("\nThank you for using PrimFiVe v. {0}!\nPlease cite PrimFiVe if it has proved beneficial to you!\n'{1}'\nFor any queries/ suggestions, please feel free to contact the developer at:\naditya.onco@gmail.com".format(version,citation))